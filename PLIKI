#include <stdio.h>

/*
 * 1. Napisz program, który wpisuje do pliku (parametr programu) 40 znaków w wierszach
 * 5-cio znakowych. Przy czytaniu ignoruje znak ‘*’ i ‘.’ (one nie są wliczane do 40 znaków)
 */

int main(int argc, char *argv[]) {

    // Otwieram plik argv[1] (parametr uruchomienia programu) w trybie (w)rite
    FILE *file = fopen(argv[1], "w");

    // Pętla się wykonuje dopuki wpisane bedzie 40 znaków
    int count = 1;
    while (count <= 40)
    {
        // Wczytuje znak
        char znak = 0;
        printf("\nPodaj znak:");
        scanf(" %c", &znak);

        // Jeżeli * lub . to pomiń
        if (znak == '*' || znak == '.') {
            continue;
        }

        // Wpisuje znak do pliku
        fprintf(file, "%c", znak);

        // Co 5 znaków wpisz nową linie ("w wierszach 5-cio znakowych")
        if (count % 5 == 0) {
            fprintf(file, "\n");
        }

        count++;
    }

    // Zamknięcie pliku (ważne!)
    fclose(file);
}






#include <stdio.h>

/*
 * 3. Napisz program, który zlicza zapisane linijki w istniejącym pliku (parametr
 * programu) i zapisuje ich liczbę do innego pliku (drugi parametr programu).
 */

// program.exe ./input.txt ./output.txt
int main(int argc, char *argv[]) {

    // Otwieramy pliczki
    FILE *input = fopen(argv[1], "r");
    FILE *output = fopen(argv[2], "w");

    // Tutaj przechowujemy ile jest linijek (przyjmuje że brak znaków = jedna linijka | tak jak w notepad.exe)
    int lineCount = 1;

    // Tutaj sprawdzam znak po znaku plik
    char singleChar = 0;
    do
    {
        // Pobieram jeden znak
        singleChar = (char)fgetc(input);
        // Jeżeli nowa linia, to policz jom
        if (singleChar == '\n') {
            lineCount++;
        }

        // Powtarzaj do końca pliku
    } while(singleChar != EOF);

    // Zapisz do output
    fprintf(output, "%d", lineCount);
    
    fclose(input);
    fclose(output);
}






#include <stdio.h>

/*
 *2. Napisz program, który wyświetla na monitorze liczbę wystąpień cyfr i małych liter
 * (każdej osobno) w podanym pliku (parametr programu).
 */

// program.exe ./input.txt
int main(int argc, char *argv[]) {

    // Otwieramy pliczek
    FILE *input = fopen(argv[1], "r");

    int numberCount[10];
    for (int i = 0; i < 10; i++) {
        numberCount[i] = 0;
    }

    int smallCharsCount[30];
    for (int i = 0; i < 30; i++) {
        smallCharsCount[i] = 0;
    }

    // Tutaj sprawdzam znak po znaku plik
    char singleChar = 0;
    do
    {
        // Pobieram jeden znak
        singleChar = (char)fgetc(input);

        // Jeżeli cyfra, zwieksz o jeden
        if (singleChar >= '0' && singleChar <= '9') {
            // Zapisz w odpowiednim indeksie
            int index = singleChar - '0';
            numberCount[index]++;
        }

        // Jeżeli cyfra, zwieksz o jeden
        if (singleChar >= 'a' && singleChar <= 'z') {
            // Zapisz w odpowiednim indeksie
            int index = singleChar - 'a';
            smallCharsCount[index]++;
        }

        // Powtarzaj do końca pliku
    } while(singleChar != EOF);

    // Wypisz ponownie
    printf("Cyfry:\n");
    for (int i = 0; i < 10; i++) {
        // Ale tylko jeżeli wystąpił
        if (numberCount[i] > 0) {
            // Tam odejmowaliśmy, tu dodajemy żeby wrócić do tego samego znaku
            char numberChar = '0' + i;
            printf("%c: %d\n", numberChar, numberCount[i]);
        }
    }

    // Wypisz ponownie
    printf("Male litery:\n");
    for (int i = 0; i < 30; i++) {
        // Ale tylko jeżeli wystąpił
        if (smallCharsCount[i] > 0) {
            char smallChar = 'a' + i;
            // Tam odejmowaliśmy, tu dodajemy żeby wrócić do tego samego znaku
            printf("%c: %d\n", smallChar, smallCharsCount[i]);
        }
    }

    // Zamykamy plik
    fclose(input);
}






#include <stdio.h>

/*
 * 4. Napisz program, który kopiuje plik tekstowy (pierwszy parametr programu ) do
 * drugiego pliku (drugi parametr programu) w ten sposób, że każdy ciąg spacji redukuje
 * do jednej i na końcu pliku podaje liczbę usuniętych spacji.
 */

// program.exe ./input.txt ./output.txt
int main(int argc, char *argv[]) {

    // Otwieramy pliczki
    FILE *input = fopen(argv[1], "r");
    FILE *output = fopen(argv[2], "w");


    // Przechowujemy aktualny znak, oraz poprzednio zczytany
    char previousChar = 0;
    char currentChar = 0;
    do {
        // Zczytujemy jeden znaczek
        currentChar = (char)fgetc(input);


        // Jeżeli nie ma poprzedniego znaku (początek pliku) to pomiń
        if (previousChar != 0) {
            // Jeżeli poprzedni to spacja i aktualny to spacja (dwie spacje pod rząd) to pomiń, bo nie chce dwóch 
            // spacji obok siebie. Nie musze zapisywać do previous, bo to te same znaki.
            if (previousChar == ' ' && currentChar == ' ') {
                continue;
            }
        }

        // Jeżeli to nie koniec pliku, to zapisz
        if (currentChar != EOF) {
            fprintf(output, "%c", currentChar);
        }
        // Zapamiętaj jaki znak teraz zczytaliśmy
        previousChar = currentChar;

    } while (currentChar != EOF); // End of file

    // Zamykamy pliki
    fclose(input);
    fclose(output);
}




/*
5. Napisz program, który kopiuje plik tekstowy (pierwszy parametr programu ) do drugiego pliku
(drugi parametr programu) w ten sposób, że przy przepisywaniu likwiduje puste linie w pliku
(ma usuwać również linie, które zawierają same spacje) i na końcu skopiowanego pliku podaje liczbę usuniętych linii.
 */

int main() {

    // Otwieramy pliczki
    FILE *input = fopen("test.txt", "r");
    FILE *output = fopen("test2.txt", "w");


    // Przechowujemy aktualny znak, oraz poprzednio zczytany
    char previousChar = 0;
    char currentChar = 0;
    do {
        // Zczytujemy jeden znaczek
        currentChar = (char)fgetc(input);

        if (previousChar != 0) {

            if (previousChar == '\n' && currentChar == '\n') {
                continue;
            }else if(previousChar == ' ' && currentChar == ' '){
                continue;
            }else if(previousChar == ' ' && currentChar == '\n'){
                continue;
            }else if(previousChar == '\n' && currentChar == ' '){
                continue;
            }
        }

        // Je�eli to nie koniec pliku, to zapisz
        if (currentChar != EOF) {
            fprintf(output, "%c", currentChar);
        }
        // Zapami�taj jaki znak teraz zczytali�my
        previousChar = currentChar;

    } while (currentChar != EOF); // End of file

    // Zamykamy pliki
    fclose(input);
    fclose(output);
}





#include <stdio.h>

/*
 * 6. Napisz program, który kopiuje podany plik (parametr programu) do innego pliku
 * (drugi parametr programu) w wierszach zawierających po 20 znaków i na końcu
 * każdego z tych wierszy dopisuje znak ‘*’.(Mamy otrzymać równą kolumnę o szerokości
 * 20 + '*').
 */

// program.exe ./input.txt ./output.txt
int main(int argc, char *argv[]) {

    // Otwieramy pliczki
    FILE *input = fopen(argv[1], "r");
    FILE *output = fopen(argv[2], "w");

    int charsCountBuffer = 1;

    // Przechowujemy aktualny znak, oraz poprzednio zczytany
    char currentChar = 0;
    // Nieskończona pętla, bo w środku sprawdzam koniec pliku
    while (1) {
        // Zczytujemy jeden znaczek
        currentChar = (char)fgetc(input);
        if (currentChar == EOF) {
            break;
        }

        // Jeżeli nowa linia, pomiń (sam je wstawiam)
        if (currentChar == '\n') {
            continue;
        }

        // Kopiujemy tekst do drugiego pliku
        fprintf(output, "%c", currentChar);

        // Jeżeli naliczyliśmy 20 znaków, wstaw *, nową linie oraz wyzeruj buFort.
        if (charsCountBuffer == 20) {
            fprintf(output, "*\n");
            charsCountBuffer = 0;
        }

        charsCountBuffer++;
    }

    // Zamykamy pliki
    fclose(input);
    fclose(output);
}



#include <stdio.h>

/*
 *7. Napisz program, który kopiując podany plik (parametr programu) do innego pliku (drugi
 * parametr programu), każde zdanie zaczyna od nowej linii i dużej litery. Zakładamy, że zdanie kończy
 * się znakiem kropki ‘.’ i spacji. , a na dużą literę zamieniamy tylko małe litery po kropce (inne znaki tj.
 * cyfry, kropki itp. kopiowane są bez zmian).
 */

// program.exe ./input.txt ./output.txt
int main(int argc, char *argv[]) {

    // Otwieramy pliczki
    FILE *input = fopen(argv[1], "r");
    FILE *output = fopen(argv[2], "w");

    // Przechowujemy aktualny znak, oraz poprzednio zczytany
    char previousChar = 0;
    char currentChar = 0;
    // Nieskończona pętla, bo w środku sprawdzam koniec pliku
    while (1) {
        // Zczytujemy jeden znaczek
        currentChar = (char)fgetc(input);
        if (currentChar == EOF) {
            break;
        }

        // Pomijamy nowe linie (sami je wstawiamy)
        if (currentChar == '\n') {
            continue;
        }

        // Jeżeli sekwencja ". " oznacza nową linie, więc ją wstawiamy
        // Zapisujemy poprzedni znak jako nową linie, żeby wiedzieć że trzeba sprawdzić, kolejny warunek
        if (previousChar == '.' && currentChar == ' ') {
            fprintf(output, "\n");
            previousChar = '\n';
            continue;
        }

        // Jeżeli poprzedni znak był nową linią, trzeba sprawdzić i ew. podmienić małą litere na dużą
        if (previousChar == '\n' && currentChar >= 'a' && currentChar <= 'z') {
            // 32 to różnica w tabeli ASCII między małymi literami a dużymi
            currentChar -= 32;
        }

        // Kopiujemy do output
        fprintf(output, "%c", currentChar);

        previousChar = currentChar;
    }

    // Zamykamy pliki
    fclose(input);
    fclose(output);
}



/8. *Napisz program, który porównuje pierwsze znaki w kolejnych liniach dwóch plików
(parametry programu) i wypisuje na monitorze numery linii, które zaczyna³y siê od tego
samego znaku oraz powtarzaj¹cy siê w nich pierwszy znak.(Je¿eli pliki maj¹ ró¿n¹ liczbê
wierszy, to "nadmiarowe" wiersze d³u¿szego pliku nie s¹ analizowane).*/
#include <stdio.h>
#include <stdlib.h>


int main(){
    char znak1, znak2; // stworzenie dwoch zmiennych typu char do ktorej przypisywane beda znaki
    int wiersz = 1; // stworzenie zmiennej typu int ktora posluzy do wypisywania wiersza w ktorym znaki powtorzyly sie
    FILE *plik, *plik2; // wskazniki do pliku

    // jesli nie da sie otworzyc to zamknij
    if( (plik = fopen("test1.txt","r")) == NULL){
        printf("Nie mozna otworzyc pliku"); // jesli nie mozna otworzyc to zakoncz
        exit(1);
    }
    if( (plik2 = fopen("test2.txt","r")) == NULL){
        printf("Nie mozna otworzyc pliku"); // jesli nie mozna otworzyc to zakoncz
        exit(1);
    }

    while(!( (znak1 = getc(plik)) == EOF || (znak2 = getc(plik2)) == EOF) ){ // Pobieraj znaki z plików dopóki któryœ z plików siê nie skoñczy
        if(znak1 == znak2) {   //Jeœli pierwsze znaki w liniach s¹ równe
            printf("Wiersz: %d, Znak: %c\n", wiersz, znak1); // wypisz w ktorym wierszu i jaki znak jest taki sam
        }
        ++wiersz;  // zwieksz zmienna wiersz
        while((znak1 = getc(plik)) != '\n' || znak1 != EOF)); // dwie petle while majace na celu przeskoczenie kolejnych znakow az do natrafienia na nowa linie
        while((znak2 = getc(plik2)) != '\n' || znak2 != EOF)); // lub na koniec pliku
    }
    fclose(plik); // zamknij oba pliki
    fclose(plik2);

}





//9. Napisz program, który przy kopiowaniu jednego pliku do drugiego (parametry programu)
//zmienia w pierwszej kolumnie ma³e litery na du¿e, bez u¿ycia funkcji zamieniaj¹cej ma³e
//litery na du¿e dostêpnej w bibliotece C(pozosta³e znaki kopiuje bez zmian).

#include <stdio.h>
#include <stdlib.h>

int main() {
    char znak;
    FILE *plik, *plik2;

    plik=fopen("test1.txt","r");
    plik2=fopen("test2.txt","w");

    znak=fgetc(plik);
    if(znak>=97 && znak<=122)
        znak-=32;
    fprintf(plik2,"%c",znak);
    while(1){
        znak=fgetc(plik);
        if(znak==EOF)
            break;
        if(znak=='\n'){
            fprintf(plik2,"%c",znak);
            znak=fgetc(plik);
            if(znak>=97 && znak<=122)
            znak-=32;
        }
        fprintf(plik2,"%c",znak);
    }

    fclose(plik);
    fclose(plik2);
}



/*10. Napisz program, który znajduje w pliku (parametr programu) cyfry, oblicza ich iloczyn i
wypisuje jego wartość na monitorze.*/
#include <stdio.h>
#include <stdlib.h>

int main() {
    char liczba;
    int iloczyn = 1;
    int jd= 0;

    FILE *f1;
    f1 = fopen("pliczek.txt", "r");

    while(1){
      liczba = fgetc(f1);
      if(liczba == EOF)
          break;
      if(liczba >= 48 && liczba <= 57){
         jd= liczba - '0';
        iloczyn *= jd;
        printf("jd");
        }
    }

    printf("iloczyn wynosi %d\n",iloczyn);


    fclose(f1);

    return 0;
}













==================================================================================================










/*
 * 6. Napisz program, który kopiuje podany plik (parametr programu) do innego pliku
 * (drugi parametr programu) w wierszach zawieraj¹cych po 20 znaków i na koñcu
 * ka¿dego z tych wierszy dopisuje znak ‘*’.(Mamy otrzymaæ równ¹ kolumnê o szerokoœci
 * 20 + '*').
 */

// program.exe ./input.txt ./output.txt
int main(int argc, char *argv[]) {

    // Otwieramy pliczki
    FILE *input = fopen("test1.txt", "r");
    FILE *output = fopen("test2.txt", "w");
    char ch;
    int count = 1;
    while(1){
        ch= fgetc(input);
        if(ch==EOF)
            break;
        if(ch=='\n')
            continue;

        fprintf(output,"%c",ch);

        if(count == 20){
            fprintf(output,"*\n");
            count = 0;
        }
        count++;
    }

    fclose(input);
    fclose(output);
}



///. 7.  Napisz program, który kopiuj¹c podany plik (parametr programu) do innego pliku (drugi
//parametr programu), ka¿de zdanie zaczyna od nowej linii i du¿ej litery. Zak³adamy, ¿e zdanie koñczy
//siê znakiem kropki ‘.’ i spacji. , a na du¿¹ literê zamieniamy tylko ma³e litery po kropce (inne znaki tj.
//cyfry, kropki itp. kopiowane s¹ bez zmian)./
#include<stdio.h>
int main() {
    char ch, ch1 = 0;
    FILE *f1, *f2;
    f1 = fopen("pliczek.txt", "r");
    f2 = fopen("pliczek2.txt", "w");
    while(1) {
        ch = (char)fgetc(f1);
        if(ch==EOF)
            break;
        if(ch1=='.' && ch==' '){
            ch=fgetc(f1);
            if(ch>=97 && ch<=122){
                ch-=32;
            }
            fprintf(f2,"\n");
        }
        ch1= ch;
       fprintf(f2,"%c",ch);
    }
    fclose(f2);
    fclose(f1);
    return 0;
